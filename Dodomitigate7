function poolBorrow(address token, uint256 amount) external nonReentrant allowedToken(token) onlyPool {
    uint256 quota = ID3PoolQuota(_POOL_QUOTA_).getPoolQuota(msg.sender, token);
    accrueInterest(token);

    AssetInfo storage info = assetInfo[token];
    BorrowRecord storage record = info.borrowRecord[msg.sender];
    uint256 oldInterestIndex = record.interestIndex;
    uint256 currentInterestIndex = info.borrowIndex;
    if (oldInterestIndex == 0) oldInterestIndex = 1e18;
    uint256 usedQuota = record.amount.div(oldInterestIndex).mul(currentInterestIndex);
    require(amount + usedQuota <= quota, Errors.EXCEED_QUOTA);
    require(amount <= info.balance, Errors.AMOUNT_EXCEED_VAULT_BALANCE);

    // Add a check to ensure that the vault has sufficient token balance
    uint256 availableBalance = info.balance - amount;
    require(availableBalance >= info.totalBorrows, "Insufficient token balance in the vault.");

    uint256 interests = usedQuota - record.amount;

    record.amount = usedQuota + amount;
    record.interestIndex = currentInterestIndex;
    info.totalBorrows = info.totalBorrows + amount;
    info.balance = availableBalance; 
    IERC20(token).safeTransfer(msg.sender, amount);

    emit PoolBorrow(msg.sender, token, amount, interests);
}
